// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: MyProto.proto

#include "MyProto.pb.h"
#include "MyProto.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace MyPackage {

static const char* MyServer_method_names[] = {
  "/MyPackage.MyServer/MyCallA",
  "/MyPackage.MyServer/MyCallB",
};

std::unique_ptr< MyServer::Stub> MyServer::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MyServer::Stub> stub(new MyServer::Stub(channel));
  return stub;
}

MyServer::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_MyCallA_(MyServer_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_MyCallB_(MyServer_method_names[1], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status MyServer::Stub::MyCallA(::grpc::ClientContext* context, const ::MyPackage::MyRequest& request, ::MyPackage::MyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::MyPackage::MyRequest, ::MyPackage::MyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_MyCallA_, context, request, response);
}

void MyServer::Stub::experimental_async::MyCallA(::grpc::ClientContext* context, const ::MyPackage::MyRequest* request, ::MyPackage::MyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::MyPackage::MyRequest, ::MyPackage::MyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MyCallA_, context, request, response, std::move(f));
}

void MyServer::Stub::experimental_async::MyCallA(::grpc::ClientContext* context, const ::MyPackage::MyRequest* request, ::MyPackage::MyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MyCallA_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::MyPackage::MyResponse>* MyServer::Stub::PrepareAsyncMyCallARaw(::grpc::ClientContext* context, const ::MyPackage::MyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::MyPackage::MyResponse, ::MyPackage::MyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_MyCallA_, context, request);
}

::grpc::ClientAsyncResponseReader< ::MyPackage::MyResponse>* MyServer::Stub::AsyncMyCallARaw(::grpc::ClientContext* context, const ::MyPackage::MyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncMyCallARaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::MyPackage::MyData>* MyServer::Stub::MyCallBRaw(::grpc::ClientContext* context, const ::MyPackage::MyData& request) {
  return ::grpc::internal::ClientReaderFactory< ::MyPackage::MyData>::Create(channel_.get(), rpcmethod_MyCallB_, context, request);
}

void MyServer::Stub::experimental_async::MyCallB(::grpc::ClientContext* context, ::MyPackage::MyData* request, ::grpc::experimental::ClientReadReactor< ::MyPackage::MyData>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::MyPackage::MyData>::Create(stub_->channel_.get(), stub_->rpcmethod_MyCallB_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::MyPackage::MyData>* MyServer::Stub::AsyncMyCallBRaw(::grpc::ClientContext* context, const ::MyPackage::MyData& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::MyPackage::MyData>::Create(channel_.get(), cq, rpcmethod_MyCallB_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::MyPackage::MyData>* MyServer::Stub::PrepareAsyncMyCallBRaw(::grpc::ClientContext* context, const ::MyPackage::MyData& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::MyPackage::MyData>::Create(channel_.get(), cq, rpcmethod_MyCallB_, context, request, false, nullptr);
}

MyServer::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MyServer_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MyServer::Service, ::MyPackage::MyRequest, ::MyPackage::MyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MyServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::MyPackage::MyRequest* req,
             ::MyPackage::MyResponse* resp) {
               return service->MyCallA(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MyServer_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< MyServer::Service, ::MyPackage::MyData, ::MyPackage::MyData>(
          [](MyServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::MyPackage::MyData* req,
             ::grpc::ServerWriter<::MyPackage::MyData>* writer) {
               return service->MyCallB(ctx, req, writer);
             }, this)));
}

MyServer::Service::~Service() {
}

::grpc::Status MyServer::Service::MyCallA(::grpc::ServerContext* context, const ::MyPackage::MyRequest* request, ::MyPackage::MyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MyServer::Service::MyCallB(::grpc::ServerContext* context, const ::MyPackage::MyData* request, ::grpc::ServerWriter< ::MyPackage::MyData>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace MyPackage

