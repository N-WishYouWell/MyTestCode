// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MyProto.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_MyProto_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_MyProto_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_MyProto_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_MyProto_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MyProto_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_MyProto_2eproto_metadata_getter(int index);
namespace MyPackage {
class MyData;
struct MyDataDefaultTypeInternal;
extern MyDataDefaultTypeInternal _MyData_default_instance_;
class MyRequest;
struct MyRequestDefaultTypeInternal;
extern MyRequestDefaultTypeInternal _MyRequest_default_instance_;
class MyRequest_DictEntry_DoNotUse;
struct MyRequest_DictEntry_DoNotUseDefaultTypeInternal;
extern MyRequest_DictEntry_DoNotUseDefaultTypeInternal _MyRequest_DictEntry_DoNotUse_default_instance_;
class MyResponse;
struct MyResponseDefaultTypeInternal;
extern MyResponseDefaultTypeInternal _MyResponse_default_instance_;
class MyResponse_DictEntry_DoNotUse;
struct MyResponse_DictEntry_DoNotUseDefaultTypeInternal;
extern MyResponse_DictEntry_DoNotUseDefaultTypeInternal _MyResponse_DictEntry_DoNotUse_default_instance_;
}  // namespace MyPackage
PROTOBUF_NAMESPACE_OPEN
template<> ::MyPackage::MyData* Arena::CreateMaybeMessage<::MyPackage::MyData>(Arena*);
template<> ::MyPackage::MyRequest* Arena::CreateMaybeMessage<::MyPackage::MyRequest>(Arena*);
template<> ::MyPackage::MyRequest_DictEntry_DoNotUse* Arena::CreateMaybeMessage<::MyPackage::MyRequest_DictEntry_DoNotUse>(Arena*);
template<> ::MyPackage::MyResponse* Arena::CreateMaybeMessage<::MyPackage::MyResponse>(Arena*);
template<> ::MyPackage::MyResponse_DictEntry_DoNotUse* Arena::CreateMaybeMessage<::MyPackage::MyResponse_DictEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace MyPackage {

enum MyEnum : int {
  E_None = 0,
  E_Open = 1,
  E_Close = 2,
  MyEnum_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MyEnum_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MyEnum_IsValid(int value);
constexpr MyEnum MyEnum_MIN = E_None;
constexpr MyEnum MyEnum_MAX = E_Close;
constexpr int MyEnum_ARRAYSIZE = MyEnum_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MyEnum_descriptor();
template<typename T>
inline const std::string& MyEnum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MyEnum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MyEnum_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MyEnum_descriptor(), enum_t_value);
}
inline bool MyEnum_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MyEnum* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MyEnum>(
    MyEnum_descriptor(), name, value);
}
// ===================================================================

class MyData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MyPackage.MyData) */ {
 public:
  inline MyData() : MyData(nullptr) {}
  virtual ~MyData();
  explicit constexpr MyData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MyData(const MyData& from);
  MyData(MyData&& from) noexcept
    : MyData() {
    *this = ::std::move(from);
  }

  inline MyData& operator=(const MyData& from) {
    CopyFrom(from);
    return *this;
  }
  inline MyData& operator=(MyData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MyData& default_instance() {
    return *internal_default_instance();
  }
  static inline const MyData* internal_default_instance() {
    return reinterpret_cast<const MyData*>(
               &_MyData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MyData& a, MyData& b) {
    a.Swap(&b);
  }
  inline void Swap(MyData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MyData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MyData* New() const final {
    return CreateMaybeMessage<MyData>(nullptr);
  }

  MyData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MyData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MyData& from);
  void MergeFrom(const MyData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MyData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MyPackage.MyData";
  }
  protected:
  explicit MyData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_MyProto_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kDataFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bytes data = 3;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:MyPackage.MyData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MyProto_2eproto;
};
// -------------------------------------------------------------------

class MyRequest_DictEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<MyRequest_DictEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<MyRequest_DictEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  MyRequest_DictEntry_DoNotUse();
  explicit constexpr MyRequest_DictEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit MyRequest_DictEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const MyRequest_DictEntry_DoNotUse& other);
  static const MyRequest_DictEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const MyRequest_DictEntry_DoNotUse*>(&_MyRequest_DictEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "MyPackage.MyRequest.DictEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MyProto_2eproto);
    return ::descriptor_table_MyProto_2eproto.file_level_metadata[1];
  }

  public:
};

// -------------------------------------------------------------------

class MyRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MyPackage.MyRequest) */ {
 public:
  inline MyRequest() : MyRequest(nullptr) {}
  virtual ~MyRequest();
  explicit constexpr MyRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MyRequest(const MyRequest& from);
  MyRequest(MyRequest&& from) noexcept
    : MyRequest() {
    *this = ::std::move(from);
  }

  inline MyRequest& operator=(const MyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MyRequest& operator=(MyRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MyRequest& default_instance() {
    return *internal_default_instance();
  }
  enum OtherCase {
    kNum = 10,
    kStr = 12,
    OTHER_NOT_SET = 0,
  };

  static inline const MyRequest* internal_default_instance() {
    return reinterpret_cast<const MyRequest*>(
               &_MyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MyRequest& a, MyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MyRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MyRequest* New() const final {
    return CreateMaybeMessage<MyRequest>(nullptr);
  }

  MyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MyRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MyRequest& from);
  void MergeFrom(const MyRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MyRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MyPackage.MyRequest";
  }
  protected:
  explicit MyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_MyProto_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kArrFieldNumber = 2,
    kDictFieldNumber = 5,
    kDataFieldNumber = 3,
    kIdFieldNumber = 1,
    kTypeFieldNumber = 4,
    kNumFieldNumber = 10,
    kStrFieldNumber = 12,
  };
  // repeated int32 arr = 2;
  int arr_size() const;
  private:
  int _internal_arr_size() const;
  public:
  void clear_arr();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_arr(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_arr() const;
  void _internal_add_arr(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_arr();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 arr(int index) const;
  void set_arr(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_arr(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      arr() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_arr();

  // map<int32, string> dict = 5;
  int dict_size() const;
  private:
  int _internal_dict_size() const;
  public:
  void clear_dict();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >&
      _internal_dict() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >*
      _internal_mutable_dict();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >&
      dict() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >*
      mutable_dict();

  // .MyPackage.MyData data = 3;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::MyPackage::MyData& data() const;
  ::MyPackage::MyData* release_data();
  ::MyPackage::MyData* mutable_data();
  void set_allocated_data(::MyPackage::MyData* data);
  private:
  const ::MyPackage::MyData& _internal_data() const;
  ::MyPackage::MyData* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::MyPackage::MyData* data);
  ::MyPackage::MyData* unsafe_arena_release_data();

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .MyPackage.MyEnum type = 4;
  void clear_type();
  ::MyPackage::MyEnum type() const;
  void set_type(::MyPackage::MyEnum value);
  private:
  ::MyPackage::MyEnum _internal_type() const;
  void _internal_set_type(::MyPackage::MyEnum value);
  public:

  // int32 num = 10;
  bool has_num() const;
  private:
  bool _internal_has_num() const;
  public:
  void clear_num();
  ::PROTOBUF_NAMESPACE_ID::int32 num() const;
  void set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num() const;
  void _internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // string str = 12;
  bool has_str() const;
  private:
  bool _internal_has_str() const;
  public:
  void clear_str();
  const std::string& str() const;
  void set_str(const std::string& value);
  void set_str(std::string&& value);
  void set_str(const char* value);
  void set_str(const char* value, size_t size);
  std::string* mutable_str();
  std::string* release_str();
  void set_allocated_str(std::string* str);
  private:
  const std::string& _internal_str() const;
  void _internal_set_str(const std::string& value);
  std::string* _internal_mutable_str();
  public:

  void clear_other();
  OtherCase other_case() const;
  // @@protoc_insertion_point(class_scope:MyPackage.MyRequest)
 private:
  class _Internal;
  void set_has_num();
  void set_has_str();

  inline bool has_other() const;
  inline void clear_has_other();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > arr_;
  mutable std::atomic<int> _arr_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      MyRequest_DictEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> dict_;
  ::MyPackage::MyData* data_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  int type_;
  union OtherUnion {
    constexpr OtherUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::int32 num_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr str_;
  } other_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_MyProto_2eproto;
};
// -------------------------------------------------------------------

class MyResponse_DictEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<MyResponse_DictEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<MyResponse_DictEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  MyResponse_DictEntry_DoNotUse();
  explicit constexpr MyResponse_DictEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit MyResponse_DictEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const MyResponse_DictEntry_DoNotUse& other);
  static const MyResponse_DictEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const MyResponse_DictEntry_DoNotUse*>(&_MyResponse_DictEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "MyPackage.MyResponse.DictEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MyProto_2eproto);
    return ::descriptor_table_MyProto_2eproto.file_level_metadata[3];
  }

  public:
};

// -------------------------------------------------------------------

class MyResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MyPackage.MyResponse) */ {
 public:
  inline MyResponse() : MyResponse(nullptr) {}
  virtual ~MyResponse();
  explicit constexpr MyResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MyResponse(const MyResponse& from);
  MyResponse(MyResponse&& from) noexcept
    : MyResponse() {
    *this = ::std::move(from);
  }

  inline MyResponse& operator=(const MyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MyResponse& operator=(MyResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MyResponse& default_instance() {
    return *internal_default_instance();
  }
  enum OtherCase {
    kNum = 10,
    kStr = 12,
    OTHER_NOT_SET = 0,
  };

  static inline const MyResponse* internal_default_instance() {
    return reinterpret_cast<const MyResponse*>(
               &_MyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MyResponse& a, MyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MyResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MyResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MyResponse* New() const final {
    return CreateMaybeMessage<MyResponse>(nullptr);
  }

  MyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MyResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MyResponse& from);
  void MergeFrom(const MyResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MyResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MyPackage.MyResponse";
  }
  protected:
  explicit MyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_MyProto_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kArrFieldNumber = 2,
    kDictFieldNumber = 5,
    kDataFieldNumber = 3,
    kIdFieldNumber = 1,
    kTypeFieldNumber = 4,
    kNumFieldNumber = 10,
    kStrFieldNumber = 12,
  };
  // repeated int32 arr = 2;
  int arr_size() const;
  private:
  int _internal_arr_size() const;
  public:
  void clear_arr();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_arr(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_arr() const;
  void _internal_add_arr(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_arr();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 arr(int index) const;
  void set_arr(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_arr(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      arr() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_arr();

  // map<int32, string> dict = 5;
  int dict_size() const;
  private:
  int _internal_dict_size() const;
  public:
  void clear_dict();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >&
      _internal_dict() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >*
      _internal_mutable_dict();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >&
      dict() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >*
      mutable_dict();

  // .MyPackage.MyData data = 3;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::MyPackage::MyData& data() const;
  ::MyPackage::MyData* release_data();
  ::MyPackage::MyData* mutable_data();
  void set_allocated_data(::MyPackage::MyData* data);
  private:
  const ::MyPackage::MyData& _internal_data() const;
  ::MyPackage::MyData* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::MyPackage::MyData* data);
  ::MyPackage::MyData* unsafe_arena_release_data();

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .MyPackage.MyEnum type = 4;
  void clear_type();
  ::MyPackage::MyEnum type() const;
  void set_type(::MyPackage::MyEnum value);
  private:
  ::MyPackage::MyEnum _internal_type() const;
  void _internal_set_type(::MyPackage::MyEnum value);
  public:

  // int32 num = 10;
  bool has_num() const;
  private:
  bool _internal_has_num() const;
  public:
  void clear_num();
  ::PROTOBUF_NAMESPACE_ID::int32 num() const;
  void set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num() const;
  void _internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // string str = 12;
  bool has_str() const;
  private:
  bool _internal_has_str() const;
  public:
  void clear_str();
  const std::string& str() const;
  void set_str(const std::string& value);
  void set_str(std::string&& value);
  void set_str(const char* value);
  void set_str(const char* value, size_t size);
  std::string* mutable_str();
  std::string* release_str();
  void set_allocated_str(std::string* str);
  private:
  const std::string& _internal_str() const;
  void _internal_set_str(const std::string& value);
  std::string* _internal_mutable_str();
  public:

  void clear_other();
  OtherCase other_case() const;
  // @@protoc_insertion_point(class_scope:MyPackage.MyResponse)
 private:
  class _Internal;
  void set_has_num();
  void set_has_str();

  inline bool has_other() const;
  inline void clear_has_other();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > arr_;
  mutable std::atomic<int> _arr_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      MyResponse_DictEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> dict_;
  ::MyPackage::MyData* data_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  int type_;
  union OtherUnion {
    constexpr OtherUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::int32 num_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr str_;
  } other_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_MyProto_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MyData

// int32 id = 1;
inline void MyData::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MyData::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MyData::id() const {
  // @@protoc_insertion_point(field_get:MyPackage.MyData.id)
  return _internal_id();
}
inline void MyData::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void MyData::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:MyPackage.MyData.id)
}

// string name = 2;
inline void MyData::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& MyData::name() const {
  // @@protoc_insertion_point(field_get:MyPackage.MyData.name)
  return _internal_name();
}
inline void MyData::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:MyPackage.MyData.name)
}
inline std::string* MyData::mutable_name() {
  // @@protoc_insertion_point(field_mutable:MyPackage.MyData.name)
  return _internal_mutable_name();
}
inline const std::string& MyData::_internal_name() const {
  return name_.Get();
}
inline void MyData::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MyData::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MyPackage.MyData.name)
}
inline void MyData::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:MyPackage.MyData.name)
}
inline void MyData::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MyPackage.MyData.name)
}
inline std::string* MyData::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MyData::release_name() {
  // @@protoc_insertion_point(field_release:MyPackage.MyData.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MyData::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MyPackage.MyData.name)
}

// bytes data = 3;
inline void MyData::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& MyData::data() const {
  // @@protoc_insertion_point(field_get:MyPackage.MyData.data)
  return _internal_data();
}
inline void MyData::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:MyPackage.MyData.data)
}
inline std::string* MyData::mutable_data() {
  // @@protoc_insertion_point(field_mutable:MyPackage.MyData.data)
  return _internal_mutable_data();
}
inline const std::string& MyData::_internal_data() const {
  return data_.Get();
}
inline void MyData::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MyData::set_data(std::string&& value) {
  
  data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MyPackage.MyData.data)
}
inline void MyData::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:MyPackage.MyData.data)
}
inline void MyData::set_data(const void* value,
    size_t size) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MyPackage.MyData.data)
}
inline std::string* MyData::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MyData::release_data() {
  // @@protoc_insertion_point(field_release:MyPackage.MyData.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MyData::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MyPackage.MyData.data)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// MyRequest

// int32 id = 1;
inline void MyRequest::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MyRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MyRequest::id() const {
  // @@protoc_insertion_point(field_get:MyPackage.MyRequest.id)
  return _internal_id();
}
inline void MyRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void MyRequest::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:MyPackage.MyRequest.id)
}

// repeated int32 arr = 2;
inline int MyRequest::_internal_arr_size() const {
  return arr_.size();
}
inline int MyRequest::arr_size() const {
  return _internal_arr_size();
}
inline void MyRequest::clear_arr() {
  arr_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MyRequest::_internal_arr(int index) const {
  return arr_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MyRequest::arr(int index) const {
  // @@protoc_insertion_point(field_get:MyPackage.MyRequest.arr)
  return _internal_arr(index);
}
inline void MyRequest::set_arr(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  arr_.Set(index, value);
  // @@protoc_insertion_point(field_set:MyPackage.MyRequest.arr)
}
inline void MyRequest::_internal_add_arr(::PROTOBUF_NAMESPACE_ID::int32 value) {
  arr_.Add(value);
}
inline void MyRequest::add_arr(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_arr(value);
  // @@protoc_insertion_point(field_add:MyPackage.MyRequest.arr)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
MyRequest::_internal_arr() const {
  return arr_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
MyRequest::arr() const {
  // @@protoc_insertion_point(field_list:MyPackage.MyRequest.arr)
  return _internal_arr();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
MyRequest::_internal_mutable_arr() {
  return &arr_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
MyRequest::mutable_arr() {
  // @@protoc_insertion_point(field_mutable_list:MyPackage.MyRequest.arr)
  return _internal_mutable_arr();
}

// .MyPackage.MyData data = 3;
inline bool MyRequest::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool MyRequest::has_data() const {
  return _internal_has_data();
}
inline void MyRequest::clear_data() {
  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
inline const ::MyPackage::MyData& MyRequest::_internal_data() const {
  const ::MyPackage::MyData* p = data_;
  return p != nullptr ? *p : reinterpret_cast<const ::MyPackage::MyData&>(
      ::MyPackage::_MyData_default_instance_);
}
inline const ::MyPackage::MyData& MyRequest::data() const {
  // @@protoc_insertion_point(field_get:MyPackage.MyRequest.data)
  return _internal_data();
}
inline void MyRequest::unsafe_arena_set_allocated_data(
    ::MyPackage::MyData* data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MyPackage.MyRequest.data)
}
inline ::MyPackage::MyData* MyRequest::release_data() {
  
  ::MyPackage::MyData* temp = data_;
  data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::MyPackage::MyData* MyRequest::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:MyPackage.MyRequest.data)
  
  ::MyPackage::MyData* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::MyPackage::MyData* MyRequest::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::MyPackage::MyData>(GetArena());
    data_ = p;
  }
  return data_;
}
inline ::MyPackage::MyData* MyRequest::mutable_data() {
  // @@protoc_insertion_point(field_mutable:MyPackage.MyRequest.data)
  return _internal_mutable_data();
}
inline void MyRequest::set_allocated_data(::MyPackage::MyData* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:MyPackage.MyRequest.data)
}

// .MyPackage.MyEnum type = 4;
inline void MyRequest::clear_type() {
  type_ = 0;
}
inline ::MyPackage::MyEnum MyRequest::_internal_type() const {
  return static_cast< ::MyPackage::MyEnum >(type_);
}
inline ::MyPackage::MyEnum MyRequest::type() const {
  // @@protoc_insertion_point(field_get:MyPackage.MyRequest.type)
  return _internal_type();
}
inline void MyRequest::_internal_set_type(::MyPackage::MyEnum value) {
  
  type_ = value;
}
inline void MyRequest::set_type(::MyPackage::MyEnum value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:MyPackage.MyRequest.type)
}

// map<int32, string> dict = 5;
inline int MyRequest::_internal_dict_size() const {
  return dict_.size();
}
inline int MyRequest::dict_size() const {
  return _internal_dict_size();
}
inline void MyRequest::clear_dict() {
  dict_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >&
MyRequest::_internal_dict() const {
  return dict_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >&
MyRequest::dict() const {
  // @@protoc_insertion_point(field_map:MyPackage.MyRequest.dict)
  return _internal_dict();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >*
MyRequest::_internal_mutable_dict() {
  return dict_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >*
MyRequest::mutable_dict() {
  // @@protoc_insertion_point(field_mutable_map:MyPackage.MyRequest.dict)
  return _internal_mutable_dict();
}

// int32 num = 10;
inline bool MyRequest::_internal_has_num() const {
  return other_case() == kNum;
}
inline bool MyRequest::has_num() const {
  return _internal_has_num();
}
inline void MyRequest::set_has_num() {
  _oneof_case_[0] = kNum;
}
inline void MyRequest::clear_num() {
  if (_internal_has_num()) {
    other_.num_ = 0;
    clear_has_other();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MyRequest::_internal_num() const {
  if (_internal_has_num()) {
    return other_.num_;
  }
  return 0;
}
inline void MyRequest::_internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_num()) {
    clear_other();
    set_has_num();
  }
  other_.num_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MyRequest::num() const {
  // @@protoc_insertion_point(field_get:MyPackage.MyRequest.num)
  return _internal_num();
}
inline void MyRequest::set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:MyPackage.MyRequest.num)
}

// string str = 12;
inline bool MyRequest::_internal_has_str() const {
  return other_case() == kStr;
}
inline bool MyRequest::has_str() const {
  return _internal_has_str();
}
inline void MyRequest::set_has_str() {
  _oneof_case_[0] = kStr;
}
inline void MyRequest::clear_str() {
  if (_internal_has_str()) {
    other_.str_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_other();
  }
}
inline const std::string& MyRequest::str() const {
  // @@protoc_insertion_point(field_get:MyPackage.MyRequest.str)
  return _internal_str();
}
inline void MyRequest::set_str(const std::string& value) {
  _internal_set_str(value);
  // @@protoc_insertion_point(field_set:MyPackage.MyRequest.str)
}
inline std::string* MyRequest::mutable_str() {
  // @@protoc_insertion_point(field_mutable:MyPackage.MyRequest.str)
  return _internal_mutable_str();
}
inline const std::string& MyRequest::_internal_str() const {
  if (_internal_has_str()) {
    return other_.str_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void MyRequest::_internal_set_str(const std::string& value) {
  if (!_internal_has_str()) {
    clear_other();
    set_has_str();
    other_.str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  other_.str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MyRequest::set_str(std::string&& value) {
  // @@protoc_insertion_point(field_set:MyPackage.MyRequest.str)
  if (!_internal_has_str()) {
    clear_other();
    set_has_str();
    other_.str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  other_.str_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MyPackage.MyRequest.str)
}
inline void MyRequest::set_str(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_str()) {
    clear_other();
    set_has_str();
    other_.str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  other_.str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:MyPackage.MyRequest.str)
}
inline void MyRequest::set_str(const char* value,
                             size_t size) {
  if (!_internal_has_str()) {
    clear_other();
    set_has_str();
    other_.str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  other_.str_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:MyPackage.MyRequest.str)
}
inline std::string* MyRequest::_internal_mutable_str() {
  if (!_internal_has_str()) {
    clear_other();
    set_has_str();
    other_.str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return other_.str_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MyRequest::release_str() {
  // @@protoc_insertion_point(field_release:MyPackage.MyRequest.str)
  if (_internal_has_str()) {
    clear_has_other();
    return other_.str_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void MyRequest::set_allocated_str(std::string* str) {
  if (has_other()) {
    clear_other();
  }
  if (str != nullptr) {
    set_has_str();
    other_.str_.UnsafeSetDefault(str);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(str);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:MyPackage.MyRequest.str)
}

inline bool MyRequest::has_other() const {
  return other_case() != OTHER_NOT_SET;
}
inline void MyRequest::clear_has_other() {
  _oneof_case_[0] = OTHER_NOT_SET;
}
inline MyRequest::OtherCase MyRequest::other_case() const {
  return MyRequest::OtherCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// MyResponse

// int32 id = 1;
inline void MyResponse::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MyResponse::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MyResponse::id() const {
  // @@protoc_insertion_point(field_get:MyPackage.MyResponse.id)
  return _internal_id();
}
inline void MyResponse::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void MyResponse::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:MyPackage.MyResponse.id)
}

// repeated int32 arr = 2;
inline int MyResponse::_internal_arr_size() const {
  return arr_.size();
}
inline int MyResponse::arr_size() const {
  return _internal_arr_size();
}
inline void MyResponse::clear_arr() {
  arr_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MyResponse::_internal_arr(int index) const {
  return arr_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MyResponse::arr(int index) const {
  // @@protoc_insertion_point(field_get:MyPackage.MyResponse.arr)
  return _internal_arr(index);
}
inline void MyResponse::set_arr(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  arr_.Set(index, value);
  // @@protoc_insertion_point(field_set:MyPackage.MyResponse.arr)
}
inline void MyResponse::_internal_add_arr(::PROTOBUF_NAMESPACE_ID::int32 value) {
  arr_.Add(value);
}
inline void MyResponse::add_arr(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_arr(value);
  // @@protoc_insertion_point(field_add:MyPackage.MyResponse.arr)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
MyResponse::_internal_arr() const {
  return arr_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
MyResponse::arr() const {
  // @@protoc_insertion_point(field_list:MyPackage.MyResponse.arr)
  return _internal_arr();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
MyResponse::_internal_mutable_arr() {
  return &arr_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
MyResponse::mutable_arr() {
  // @@protoc_insertion_point(field_mutable_list:MyPackage.MyResponse.arr)
  return _internal_mutable_arr();
}

// .MyPackage.MyData data = 3;
inline bool MyResponse::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool MyResponse::has_data() const {
  return _internal_has_data();
}
inline void MyResponse::clear_data() {
  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
inline const ::MyPackage::MyData& MyResponse::_internal_data() const {
  const ::MyPackage::MyData* p = data_;
  return p != nullptr ? *p : reinterpret_cast<const ::MyPackage::MyData&>(
      ::MyPackage::_MyData_default_instance_);
}
inline const ::MyPackage::MyData& MyResponse::data() const {
  // @@protoc_insertion_point(field_get:MyPackage.MyResponse.data)
  return _internal_data();
}
inline void MyResponse::unsafe_arena_set_allocated_data(
    ::MyPackage::MyData* data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MyPackage.MyResponse.data)
}
inline ::MyPackage::MyData* MyResponse::release_data() {
  
  ::MyPackage::MyData* temp = data_;
  data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::MyPackage::MyData* MyResponse::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:MyPackage.MyResponse.data)
  
  ::MyPackage::MyData* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::MyPackage::MyData* MyResponse::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::MyPackage::MyData>(GetArena());
    data_ = p;
  }
  return data_;
}
inline ::MyPackage::MyData* MyResponse::mutable_data() {
  // @@protoc_insertion_point(field_mutable:MyPackage.MyResponse.data)
  return _internal_mutable_data();
}
inline void MyResponse::set_allocated_data(::MyPackage::MyData* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:MyPackage.MyResponse.data)
}

// .MyPackage.MyEnum type = 4;
inline void MyResponse::clear_type() {
  type_ = 0;
}
inline ::MyPackage::MyEnum MyResponse::_internal_type() const {
  return static_cast< ::MyPackage::MyEnum >(type_);
}
inline ::MyPackage::MyEnum MyResponse::type() const {
  // @@protoc_insertion_point(field_get:MyPackage.MyResponse.type)
  return _internal_type();
}
inline void MyResponse::_internal_set_type(::MyPackage::MyEnum value) {
  
  type_ = value;
}
inline void MyResponse::set_type(::MyPackage::MyEnum value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:MyPackage.MyResponse.type)
}

// map<int32, string> dict = 5;
inline int MyResponse::_internal_dict_size() const {
  return dict_.size();
}
inline int MyResponse::dict_size() const {
  return _internal_dict_size();
}
inline void MyResponse::clear_dict() {
  dict_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >&
MyResponse::_internal_dict() const {
  return dict_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >&
MyResponse::dict() const {
  // @@protoc_insertion_point(field_map:MyPackage.MyResponse.dict)
  return _internal_dict();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >*
MyResponse::_internal_mutable_dict() {
  return dict_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >*
MyResponse::mutable_dict() {
  // @@protoc_insertion_point(field_mutable_map:MyPackage.MyResponse.dict)
  return _internal_mutable_dict();
}

// int32 num = 10;
inline bool MyResponse::_internal_has_num() const {
  return other_case() == kNum;
}
inline bool MyResponse::has_num() const {
  return _internal_has_num();
}
inline void MyResponse::set_has_num() {
  _oneof_case_[0] = kNum;
}
inline void MyResponse::clear_num() {
  if (_internal_has_num()) {
    other_.num_ = 0;
    clear_has_other();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MyResponse::_internal_num() const {
  if (_internal_has_num()) {
    return other_.num_;
  }
  return 0;
}
inline void MyResponse::_internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_num()) {
    clear_other();
    set_has_num();
  }
  other_.num_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MyResponse::num() const {
  // @@protoc_insertion_point(field_get:MyPackage.MyResponse.num)
  return _internal_num();
}
inline void MyResponse::set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:MyPackage.MyResponse.num)
}

// string str = 12;
inline bool MyResponse::_internal_has_str() const {
  return other_case() == kStr;
}
inline bool MyResponse::has_str() const {
  return _internal_has_str();
}
inline void MyResponse::set_has_str() {
  _oneof_case_[0] = kStr;
}
inline void MyResponse::clear_str() {
  if (_internal_has_str()) {
    other_.str_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_other();
  }
}
inline const std::string& MyResponse::str() const {
  // @@protoc_insertion_point(field_get:MyPackage.MyResponse.str)
  return _internal_str();
}
inline void MyResponse::set_str(const std::string& value) {
  _internal_set_str(value);
  // @@protoc_insertion_point(field_set:MyPackage.MyResponse.str)
}
inline std::string* MyResponse::mutable_str() {
  // @@protoc_insertion_point(field_mutable:MyPackage.MyResponse.str)
  return _internal_mutable_str();
}
inline const std::string& MyResponse::_internal_str() const {
  if (_internal_has_str()) {
    return other_.str_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void MyResponse::_internal_set_str(const std::string& value) {
  if (!_internal_has_str()) {
    clear_other();
    set_has_str();
    other_.str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  other_.str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MyResponse::set_str(std::string&& value) {
  // @@protoc_insertion_point(field_set:MyPackage.MyResponse.str)
  if (!_internal_has_str()) {
    clear_other();
    set_has_str();
    other_.str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  other_.str_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MyPackage.MyResponse.str)
}
inline void MyResponse::set_str(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_str()) {
    clear_other();
    set_has_str();
    other_.str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  other_.str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:MyPackage.MyResponse.str)
}
inline void MyResponse::set_str(const char* value,
                             size_t size) {
  if (!_internal_has_str()) {
    clear_other();
    set_has_str();
    other_.str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  other_.str_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:MyPackage.MyResponse.str)
}
inline std::string* MyResponse::_internal_mutable_str() {
  if (!_internal_has_str()) {
    clear_other();
    set_has_str();
    other_.str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return other_.str_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MyResponse::release_str() {
  // @@protoc_insertion_point(field_release:MyPackage.MyResponse.str)
  if (_internal_has_str()) {
    clear_has_other();
    return other_.str_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void MyResponse::set_allocated_str(std::string* str) {
  if (has_other()) {
    clear_other();
  }
  if (str != nullptr) {
    set_has_str();
    other_.str_.UnsafeSetDefault(str);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(str);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:MyPackage.MyResponse.str)
}

inline bool MyResponse::has_other() const {
  return other_case() != OTHER_NOT_SET;
}
inline void MyResponse::clear_has_other() {
  _oneof_case_[0] = OTHER_NOT_SET;
}
inline MyResponse::OtherCase MyResponse::other_case() const {
  return MyResponse::OtherCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace MyPackage

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::MyPackage::MyEnum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MyPackage::MyEnum>() {
  return ::MyPackage::MyEnum_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_MyProto_2eproto
