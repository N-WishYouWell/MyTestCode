syntax = "proto3";
package MyPackage;
//import public "other_protos.proto"; //引入其他protobuf文件
//import  "google/protobuf/any.proto"; //导入any类型

//option py_generic_services = true;
//option cc_generic_services = true; //生成service

//分配标识号：
//[1,15]之内的标识号在编码的时候会占用一个字节。[16,2047]之内的标识号则占用2个字节。

//修饰符：
//singular：可选字段（默认，不能手动指定）
//repeated：数组
//reserved：保留/弃用字段
//->    reserved 3, 15, 9 to 11;
//->    reserved "foo", "bar";

//Protobuf消息由字段（field）构成，每个字段有其规则（rule）、数据类型（type）、字段名（name）、编号（tag），以及选项（option）

//生成命令（包含这两个exe）：
// ./protoc.exe --cpp_out=./ MyProto.proto
// ./protoc.exe --grpc_out=./ --plugin=protoc-gen-grpc=grpc_cpp_plugin.exe MyProto.proto

//proto3变更：
//第一个非注释行必须为 '''syntax = "proto3";'''
//移除了required，optional改名为singular
//移除了default默认值
//枚举类型第一个字段必须为0

//可以为枚举常量定义别名。 需要设置allow_alias option 为 true, 否则 protocol编译器会产生错误信息。
//即编号相同的那个
enum MyEnum {
    //option allow_alias = true;
    //E_N = 0;
    E_None = 0;
    E_Open = 1;
    E_Close = 2;
}

//定义数据结构
message MyData {
    int32 id = 1;
    string name = 2;
    bytes data = 3;
}

message MyRequest {
    int32 id = 1; //singular：可选字段，默认
    repeated int32 arr = 2; //repeated：数组
    MyData data = 3; //结构嵌套
    MyEnum type = 4; //自定义枚举
    map<int32,string> dict = 5; //键值对
    oneof other { //oneof 相当于union，共享一个字段内存
        int32 num = 10;
        string str = 12; //tag号不重复就行
    }
}

message MyResponse {
    int32 id = 1; 
    repeated int32 arr = 2;
    MyData data = 3;
    MyEnum type = 4;
    map<int32,string> dict = 5; 
    oneof other {
        int32 num = 10;
        string str = 12;
    }
}

//定义服务
service MyServer {
    //普通rpc方法，客户端调用
    rpc MyCallA (MyRequest) returns (MyResponse) {}
    //客户端发送请求到服务器，拿到一个流去读取返回的消息序列
    rpc MyCallB (MyData) returns (stream MyData);
    //客户端写入流
    //rpc MyCallC (stream MyData) returns (MyData);
    //双向流
    //rpc MyCallD (stream MyData) returns (stream MyData);
}
